rm(x)
rm(y)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
x
g(x)
}
z<-10
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
x
g(x)
}
z<-10
f(3)
#g(x)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
x
#g(x)
}
f(3)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
x
#g
}
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
x
#g(x)
}
g(x)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
x
g(x)
}
f<-function(x){
g<-function(y){
y+z
}
z<-4
#x+g(x)
#x
g(x)
}
f(3)
rep
rep(1,4)
resp(2,3)
rep(2,3)
mapply(rep, 1:4, 4:1)
noise
noise<-function(n,mean,sd) {}
noise<-function(n,mean,sd) { rnorm(n,mean,sd) }
noise(5,1,2)
noise(1:5,1:5,2)
rnorm
mapply(noise,1:5,1:5,2)
rm(noise)
x<-c(rnorm(10,runif(10),rnorm(10,1)))
x<-c(rnorm(10),runif(10),rnorm(10,1)))
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
runif(10)
runif
rnorm
rnorm(10)
runif(10)
rnorm(10,1)
gl
f<-gl(3,10)
f
tapply(x,f,mean)
rm(f)
rm(x)
split
str(split)
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
f
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
airquality
s<-split(airquality, airquality$Month)
s
s
s
lapply(s,function(x) colmeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colmeans(x[,c("Ozone","Solar.R","Wind")]))
rm(x)
lapply(s,function(x) colmeans(x[,c("Ozone","Solar.R","Wind")]))
rm(f)
s
lapply(s,function(x) colmeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colmeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colmeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
rm(s)
x<-rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
invisble
invislbe()
invisible
printmessage<-function(x){
if(x>0)
print("x is greater")
else
print("x is less than zero")
invisible(x)
}
rm(f1)
rm(f2)
rm(x)
printmessage(1)
printmessage(NA)
printmessage<-function(x){
if(is.na(x))
print("x is missing.")
else if(x>0)
print("x is greater")
else
print("x is less than zero")
invisible(x)
}
x<-log(-1)
printmessage(x)
traceback
traceback(printmessage(x))
rm(x)
rm(printmessage)
mean(x)
traceback()
lm(y ~ x)
trackback()
lm(y - x)
trackback()
lm(y ~ x)
trackback()
lm(y ~ x)
traceback()
debug(lm)
lm(y~x)
lm(y~x)
library(datasets)
data("iris")
iris
head(iris)
s<-split(iris, iris$Species)
s
lapply(iris,function(x) colMeans(x[, c("Spepal.Length", "Species")]))
iris
head(iris)
head(s)
s
sapply(iris$Sepal.Length, mean)
s
s$virginica
s$
rm(s)
head(iris)
split(iris,iris$Species)
s<-split(iris,iris$Species)
sapply(s, function(x) colMeans(x[, c("Spepal.Length")]))
sapply(s, function(x) rowMeans(x[, c("Spepal.Length")]))
sapply(s, mean)
sapply(s, mean(s$virginica))
mean(s$virginica)
sapply(s$virginica, mean)
sapply(s$virginica$Sepal.Length, mean)
sapply(s$virginica$Sepal.Length, mean)
mean(s$virginica$Sepal.Length)
apply(iris,2,mean)
apply(iris,1,mean)
colMeans(iris)
apply(iris[, 1:4],2,mean)
apply(s$virginica[, 1:4],2,mean)
iris
rm(iris)
rm(s)
library(datasets)
data(mtcars)
mtcars
head(mtcars)
lapply(mtcars, mean)
split(mtcars$mpg, mtcars$cyl)
S<-split(mtcars$mpg, mtcars$cyl)
s
s<-split(mtcars$mpg, mtcars$cyl)
rm(S)
s
sapply(s,mean)
s<-split(mtcars$hp, mtcars$cyl)
s
sapply(s,mean)
mean(s$8)
mean(s$"8")
mean(s$"8")-mean(s$"4")
mean(s$"4")
rm(mtcars)
rm(s)
debug(ls)
ls
ls(x)
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
rm(x)
rm(y)
play()
rm(z)
rm(my_div)
rm(my_sqrt)
nxt()
list.files()
?list.files
arg(list.files())
arg()
args(list.files())
args(list.files
)
getwd()
old.dir<-get()
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2","mytest3")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
?file.path
args(file.path)
file.path("folder1","folder2")
?dir.create
play()
getwd()
nxt
nxt()
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
dir.delete("testdir2")
getwd()
ls()
dir()
unlink("testdir2",recursive=TRUE)
setwd(ol.dir)
setwd(old.dir)
unlink('testdir')
unlink('testdir', recursive=true)
unlink('testdir', recursive=TRUE)
rm(old.dir)
rm(x)
set<-function(y)
makeVector <-function(x=numeric()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setmean<-function(mean) m <<-mean
getmean<-function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
makeVector(x=[1,2,3])
makeVector(c(1,2,3)
makeVector(c(1,2,3)]
makeVector(c(1,2,3))
rnorm(3)
t<-rnorm(5)
t
makevector(5)
makeVector(5)
makeVector(t)
cachemean
cachemean()
cachemean <-function(x, ...) {
m<-x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data<-x$get()
m<-mean(data,...)
x$setmean(m)
m
}
cachemean()
cachemean(t)
cachemean(x)
makeVector(5)
makeVector(t)
rm(t)
rm(cachemean)
rm(makeVector)
getwd()
ls
ls()
dir
dir()
setwd("..")
getwd()
ls
dir()
setwd("ProgrammingAssignment2")
dir()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector(1:50)
cachemean(a)
cachemean(a)
function
?function
function?
args(function)
function
(1:5)
function(2)
a<-makeVector(1:10)
a
rm(a)
makeVector(1:10)
a<-makeVector(1:10)
a
rm
rm(a)
b<-makeVector()
b
b$set(c(0:50))
cachmean(b)
cachemean(b)
cachemean(b)
b$set(c(-50:50))
cachemean(b)
cachemean(b)
b$set(c(0:50))
makeVector <- function(x = numeric()) {
m <- NULL
#set <- function(y) {
#  x <<- y
#  m <<- NULL
#}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
b$set(c(-50:50))
cachemean(b)
b$set(c(0:50))
cachemean(b)
cachemean(b)
b<-cachemean(0:50)
b<-makeVector(0:50)
makeVector(0:50)
rm(b)
b<-makeVector(1:50)
b<-makeVector(1:50)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(1:50)
a
a$get()
a$setmean()
a$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
#set <- function(y) {
#  x <<- y
#  m <<- NULL
#}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(1:50)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(1:50)
a$set()
a$set(1:10)
a<-makeVector(1:50)
a
a$get(1:10)
